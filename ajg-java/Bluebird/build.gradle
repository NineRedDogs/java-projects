plugins {
    id 'java'

    // Apply the application plugin to add support for building a CLI application.
    id 'application'

    // installs GraalVM, and invoke the necessary commands for compiling our Java code into a standalone executable.
    id 'com.palantir.graal' version '0.6.0'
}

group 'bluebird'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.13

repositories {
    jcenter()
}

dependencies {

    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.13.0'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.13.0'
    implementation group: 'commons-io', name: 'commons-io', version: '2.6'
    compile 'info.picocli:picocli:4.3.1'
    annotationProcessor 'info.picocli:picocli-codegen:4.3.1'
    

//    implementation 'com.google.guava:guava:28.0-jre'
//    implementation group: 'com.google.code.gson', name: 'gson', version: '2.3.1'
//    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5'

    testImplementation group: 'junit', name: 'junit', version: '4.12'
}

compileJava {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
}

graal {
    mainClass 'dogs.red.nine.oracle.Oracle'
    outputName 'bluebird'
}

application {
    // Define the main class for the application.
    mainClassName = 'dogs.red.nine.oracle.Oracle'
}

jar {
    manifest {
        attributes(
                'Main-Class': 'dogs.red.nine.oracle.Oracle'
        )
    }
    from {
        //configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.compileClasspath.filter{ it.exists() }.collect { it.isDirectory() ? it : zipTree(it) }
    }
}


