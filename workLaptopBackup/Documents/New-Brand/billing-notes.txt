Billing system

   - billing & collections
      - recurring/one off
   - o/g payments
      - via claims settlements
      - services e.g. repairers
   - General Ledger integration
   - invoicing - customizable ? partnerships ?
   - integrate with payment gateway
      - in-house payment gateway
      - off the shelf g/w ?
      - add new payment methods/cards/etc
   - payment reminders ? branded ?
   - integrate with accounting s/w ?

   - subscription/usage based billing ?
   - recalculations/pro-rata
   


   - timely upgrades (change to rules/processes/workflows)
   - integrate with off-the-shelf payment plans/config/forms
   - support all common payment options
   - handle high volume workflow
   - support complex enhanced billing operations
   - integration with :
      - policy
      - claims
   - scalable
   - easily deploy new billing plans/fees/services charges/invoice
   - Agents - intuitive UI to avoid heavy training periods
   - Testable - 
   - CX/UX 
      - provide a single account view of all billing/payment transactions
      - via Mobile devices
      - self service ?


-------

Ratabase holds data needed by BC for APR/Tax, this introduces a dependency between them and therefore adds complexity to the solution.

We currently have approx 40% vanilla BC code, with 60% modified locally in house

The config changes we have made have been applied as code changes (Gosu)

For upgrades, we perform a '3-way-merge', with:  Va (orig) - Va (Admiral) - Vb (orig)

PC provides XML to represent the new/updated policy, which includes costs & payment plan info. BC will then set up the payments and ultimately inform PC when/if the payment has been made/setup successfully.

In basic terms, BC's role is pretty straightforward, PC defines policy and determines what is owed by the customer including payment plan). BC is responsible for the retrieval of the money.

Even though we only use 2 modes of payment (full up-front or 12 x monthly DDs), adding new payment plans is very simple in BC

Where money cannot be retrieved from a customer's account, we initiate BC's 'Default' workflow - here we try again, and then begine the process to inform customer, which could then ultimately result in the policy being cancelled.

Hosted Payment pages (HPP) can be branded for partnerships, this is apparently easier with new SmartPay-S gateway from Barclays.

For Amazon, where the payments will be made to Amazon and at some point will be transferred to Admiral, there are potentially 2 modes of payment:
   - Amazon provide a HPP which links through to AmazonPay
   - Amazon controls the full payment journey. We simply set up policy and then (in BC) set up a no-pay policy, this has apparently been done for Ford. Where Ford 'offer' free insurance for some customers.

New platform: we talked about subscription/usage based billing. Beth suggested that PC will have the work to determine how much needs to be paid by the customer and BC is responsible for retrieving this fee. So the complexity for setting the costs would not reside in BC.

Database: Currently BC DB is over subscribed. This is due to the complex granularisation of costs required by BC to support GL requirements. BC needs to split down payments across products/underwriters for a single policy. So a single customer payment may result in many more DB writes than you'd expect. We regularly reach upper DB limits, and simply resolve this by throwing disk at the DB. EY appear to be comfortable with this approach as the sizes we talk about is nothing new for them, even though we are nearing upper limits recommended by GW.

We have a debt-chase team, when the Default workflow is initiated and cannot reach a satisfactory payment conclusion, BC passes on details to the appropriate debt-chase team to own.

Having a second instance of BC would be the safest way to add a new product with differing payment plans/workflows/brandings. This approach ensures further DB constraints could be avoided.

Moving forward, Beth suggested resolving GL requirements using a different approach (preferably a dedicated GL solution) would allow BC to reduce its data footprint and subsequent strain on the BD.

Batch jobs set up nightly to retrieve DD payments appear to be overly complex, switching between draft/pay/draft on the days leading up to the actual payment. These jobs are very large.

Upgrades:
   Migration to BC 10 is a large job, and has been quoted as approx 15 MY effort 
   2 day outage to upgrade BC as it stands.


