1st pass - positive re-inforcement (andy.ajg)

   - forename - levenshtein similarity (LS) (sets a score 0.0 -> 1.0) - if above a predefined threshold, will set a flag on the match relationship (containing the levenshtein score)
  - surname - LS score
  - forename - phonetic match (boolean)
  - surname - phonetic 
  - dln - LS score
  - DoB - days diff (0..7)
  - DoB - month/date switched (boolean)
  - YoB - match (boolean)
  - mobile - LS score
  - email - LS score
  - postcode - LS score

at this point, we'll have a match relationship for any person records passing any of the above tests, the more passed tests, the more decorated the match relationship becomes.


2nd pass - negative reinforcement (andy.ajg)

these commands are only applied to persons already connected with match relationships from the 1st pass, so we can try to dilute any relationships where there is an obvious mis-match

  - forename - LS below a level is added to the match relationship
  - surname - poor LS score
  - forename - phonetic mis-match (boolean)
  - surname - phonetic mis-match (boolean)
  - dln - poor LS score
  - DoB - days diff outisde a suitable range
  - YoB - mis-match (boolean)
  - mobile - poor LS score
  - email - poor LS score
  - postcode - poor LS score



pass 3 (andy.ajg)

for each match relationship

determine what flags/scores are present on the relationship, then work through 
and determine a weighting score (arbitrary formula & multipliers)

can then remove any match relationships with a low final weighting - to reduce the load on the louvain algorithm 


pass 4 (andy.detectCommunities)

call louvain algorithm, which uses the weight value on the match relationship to come up with a notion of a community, and will then assign a communityId property to a person record - where a number of 'similar' person records will have the same community id


pass 5 (andy.createIdentities)

identifies person objects with a communityId property, then attaches any person record with the same communityId to an identity node representing that communityId




