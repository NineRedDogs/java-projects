docker rest-api/mysql app

1a. start mysql docker container

	$ docker run -d -p 2012:3306 --name andy-mysql-ctnr -e MYSQL_ROOT_PASSWORD=root123 -e MYSQL_DATABASE=spring_app_db -e MYSQL_USER=app_user -e MYSQL_PASSWORD=test123 mysql:latest

check its up

	$ docker ps
	CONTAINER ID        IMAGE                    COMMAND                  CREATED             STATUS              PORTS                               NAMES
	59cd6a76e34a        mysql:latest             "docker-entrypoint.s_"   21 hours ago        Up 21 hours         33060/tcp, 0.0.0.0:2012->3306/tcp   andy-mysql-ctnr

can then connect to it via localhost and the port we've exposed for it (i.e. 2012).

	$ mysql -h 127.0.0.1 -P 2012 --user=root -p
	Enter password: root123

then get into MySQL client ....

	mysql> show databases;
	+--------------------+
	| Database           |
	+--------------------+
	| information_schema |
	| mysql              |
	| performance_schema |
	| spring_app_db      |
	| sys                |
	+--------------------+
	5 rows in set (0.00 sec)

can now do the usual sql commands .....

*ALSO* can use a gui tool like mysql-workbench (i've installed to windows. there is a linux version, but no need to install a gui linux version when we have the native windows app available)

----------

1b. create db & table needed for rest-api (see 2)

start up mysql-workbench (windows app)
open up sql script : /mnt/c/Users/agrahame/dev/eclipse-workspace/spring-rest/create-db.sql
execute - will create db & table required for part 2 (below)




2. Rest API component

created a springboot rest api app (see /home/agrahame/dev/eclipse-workspace/spring-rest)

build & update docker image

	$ mvn clean install dockerfile:build
	$ docker run -p 8087:8080 --link andy-mysql-ctnr -t ajg_spring/spring-rest

by linking our rest-api container to the mysql container, we can use the following src/main/resources/application.properties in the rest-api project:

	spring.datasource.url=jdbc:mysql://andy-mysql-ctnr:3306/restapi
	spring.datasource.username=root
	spring.datasource.password=root123


assuming the rest-api docker container started up without error, can now test
some calls into the rest-api

3. fire up ARC

GET http://localhost:8087/team - 
   - should return a 200 with no rows - as no data has yet been written to the team table.


problems with POSTing new entries - need to set up ORM mappings ....

parked for now

moving on to mongo


---------------------------------------------------------------

MONGO

1. download docker mongo

$ docker pull mongo

2. Start up mongo

$ docker run -d -p 27777:27017 --name andy-mongo mongo

3. Quick test

a) compass

download MongoDB Compass
make connection to localhost:27777 - should see the default DBs : admin,
config & local

b) mongodb shell

   - in ubuntu, 
      $ sudo apt install mongodb-clients
      $ mongo --port 27777
 
      connects to our docker mongo db and starts the mongodb shell, so can
execute commands, e.g.:

	> show databases
	admin   0.000GB
	config  0.000GB
	local   0.000GB



4. Rest API

      coded up in eclipse-projects/spring-rest-mongo

      build & updated img : 
      $ mvn clean install dockerfile:build

      create docker volume to store mongo data
      $ docker volume create andy-mongo-db-data-volume

      start up mongo db - hooked up to data volume
      $ docker run --name andy-mongo -p 27777:27017 -d -v andy-mongo-db-data-volume:/data/db mongo

      $ start up rest api, linked to mongo db cntr
      docker run -p 8087:8080 --name ajg-mongo-rest --link andy-mongo -t ajg_spring_mongo/spring-rest-mongo

      with this set up, can CRUD data and it gets written to the data volume, which means can start/stop/remove 
      the mongo-db and rest-api containers and the data will be persisted.


docker tips

if container doesnt stay up for long, then start without the '-d' switch so it
runs within the current interactive session - so you get to see any useful
error messages.



