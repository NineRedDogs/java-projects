Investigation - Okta - Kong

Setup

Okta

Signed up for a developer account (See : https://developer.okta.com/signup/). 
After completing the sign-up process, you'll get allocated an okta domain, e.g. dev-424995.okta.com

Kong

To be able to use the kong oidc plugin, you'll first need to sign up for a trial of Kong-Enterprose-Edition (see : https://konghq.com/free-trial/)
After signing up you'll receive an email containing :
   - your trial license file 
   - link to the kong-enterprise install files
   - link to installation documentation
Download and save the license/installation files somewhere safe.



Investigation 1 (kubernetes)

For this part of the investigation I used Docker desktop on my macbook, and enabled kubernetes.

I followed the instructions (see : https://docs.konghq.com/install/kubernetes/) to set up kong-ee, specifically using the 'Kong via Manifest Files' approach.

See the following attached files for notes taken when setting up the k8s cluster with kong-ee (trial):
   - k8s-notes.txt
   - oidc-plugin-setup-notes.txt

At this point, I needed to set up okta with the accounts/apps/api gateway required for testing. To that end I followed the instructions described here : https://github.com/oktadeveloper/okta-kong-origin-example.

At this point I had kong-ee (trial), postgres and the start of a spring boot app running in docker desktop.

Unfortunately, I ran into local k8s/network issues, so instead of halting, I switched to using a docker-only approach - see Investigation 2.




Investigation 2 (Docker)

Picking up from Investigation-1 wasn't too much of a problem:

   a) Docker installation of Trial version of Kong-Enterprise (see : https://docs.konghq.com/enterprise/0.36-x/deployment/installation/free-trial/)
   b) Luckily, the Okta set up carried out in investigation 1 was still good.

This meant I had so I only needed to get the docker images set up (see a)) and then I could write a script to tear-down and build up from scratch the full environment.

This script can be found in the attached source code bundle (docker-spring-app.zip) - called start-docker-env.sh. 

And assuming, your docket imamges have been set up as described in a), then this script will set up from scratch the environemnt need to start testing.
In summary, the script : 

   - builds the spring boot app
   - cleans down any previously running docker containers
   - creates the docker network needed for the containers to communicate
   - start docker containers:
      - start postgres 
      - start kong-ee using the trial license received from kong
      - start spring boot app
   - configure kong's oidc plugin - (client secret/redirect_url, etc)

Testing 

After the script has successfully been executed, start up a browser and navigate to localhost:8000, kong should redirect you to the okta login page.

Now login with one of the okta accounts setup earlier.

NOTE: The attached spring boot app, has been designed with a golf-theme. This means it expects 2 user groups to have been set up in okta:
          - club_golfers
          - major_winners 
       Then there can be any number of users created in okta that belong to either of these groups.

If you've logged in with an account belonging to club_golfers, then you will be allowed to press the club-golfers button, where you'll be presented with a list of groups that your golfer belongs to. However, if you press the major_winners button, you'll be told you don't have acesss. Repeat this process with an account set up from the major_winners group.

Also ensure a failed login is reported and handled accordingly.


Behind the scenes

The call flow of what happens is described in the diagram under the 'How does it work' section of this page : https://github.com/nokia/kong-oidc. Note this page describes the nokia oidc plugin for kong which is similar to the official oidc plugin we've used, but the diagram on this page helps describe the call-flow in simple terms.

One thing to note is that after a successfull login has taken place, the access token (containing user details defined in okta) is passed - encoded using the client secret - via the authentication: bearer header.

This can be changed to any header desired, by configuring the OIDC plugin and adding the following configuration line to step 7 of the docker startup script mentioned above, e.g. if wanted to pass the user info in a new header called x-userinfo:

     --data 'config.upstream_user_info_header=x-userinfo' \
     

To do:

 - add a log-out button to the spring boot app
 - add the ability to query how long left before the token expires
 - add a button to refresh the token











