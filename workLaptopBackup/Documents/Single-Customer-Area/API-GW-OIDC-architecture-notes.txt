authentication

current admiral insurance (motor/home/multi) portal integrates with iWelcome using standard OIDC flows.

Portal (Current)
------------------

   1. Our current portal presents a login screen (where creds are collected).
   2. These creds are then used in a REST call to validate against iWelcome, if ok an ACCESS-TOKEN and ID-TOKEN is returned by iWelcome.

   Its not yet clear if we will be able to continue with this flow if we want to take advantage of iWelcome's support for MFA and social login.

   We may need to switch the portal to adopt Oauth2.0's authorization code flow.


SCA - architecture
-------------------

Using an API g/w doubling up as an authentication (reverse) proxy is a popular pattern for this problem.

The proxy would be deployed in a place where it would handle OIDC relying party functionality on behalf of our protected resources.

The proxy would then authenticate users against iWelcome, receiving user id data, which can then be passed on to the protected resources.

The proxy/API gw would:
   - Authenticate users using OIDC flows communicating with iWelcome
   - Check the validity of OAuth/OIDC tokens (e.g. expiry), and only allow access to prtotected resources when valid tokens are provided
   - refresh tokens
   - revoke tokens (logout)
   - pass Id claims down to protected resources

Our prtoected resources will be on AKS, on-prem and other public clouds

Some products out there providing this functionality:
   Apache HTTPd (with mod_auth_openidc)
   NGINX with lua-resty-openidc plugin
   NGINX+

as well as other API-GW/OIDC products like:
   Ambassador
   Kong

We'd also need to ensure a cloud native solution wasn't already available 
   Azure B2C
   Azure API mgmt
   Amazon Application LB (ALB) service

or we could look to build our own:
  using Spring Security


API-GW/OIDC proxy solution
Pros :
   Handling of OIDC flows and subsequent use of tokens is abstracted away from our protected resources
   Centralizing AuthN to a single point (iWelcome) makes it easy to replace in the future.
   Securing Client secrets/tokens is also centralized in a single place



