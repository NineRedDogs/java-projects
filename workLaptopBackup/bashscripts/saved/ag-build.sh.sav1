#!/bin/bash

declare -a buildTypes=(lball mrball lbui mrbui lbi mrbi mrb lb lbbs lvipm mvipm)
declare -a expectedVMs=(vm1 vm2 vmd vmh)
declare -a installerProjects=(installers/mrb-installer installers/lb-installer)

###
# set up some directory vars
#
lbInstallDir="/opt/nst-loadbalancer"
mrbInstallDir="/opt/mrb"
jettyDir="jetty-distribution-8.1.10.v20130312"
jettyAppsDir="$jettyDir/webapps"

lbInstallerJarName="nst-lb-installer-*.jar"
mrbInstallerJarName="nst-mrb-installer-*.jar"

vipManagerJarName="vip-manager.jar"
vipManagerUnobsJarName="vip-manager-unobs.jar"

mrbJarName="mrb.jar"
mrbUnobsJarName="mrb-unobs.jar"

lbJarName="nst-lb.jar"
lbUnobsJarName="nst-lb-unobs.jar"

lbbsUnobsJarName="nst-bootstrap-unobs.jar"
lbbsJarName="nst-bootstrap.jar"

mrbVipManagerJar="$mrbInstallDir/$vipManagerJarName"
lbVipManagerJar="$lbInstallDir/$vipManagerJarName"

#
# service names
lbService="nst-loadbalancer"
jettyService="jetty"
mrbService="mrb"
vipManagerService="nst-vip-manager"
#
#

usage() {
    echo " "
    echo "$@"
    echo " "
    echo "Usage : bld <build-type> <remote-machine-to-copy-to>"
    echo "        build-type     : ${buildTypes[@]}"
    echo "        remote machine : ${expectedVMs[@]}"
    echo " "
    exit -1
}

checkArg() {
   goodArg=false

    declare -a argAry1=("${!2}")
    #echo "${argAry1[@]}"

   for checkType in ${argAry1[@]}
   do
      #echo " testing : $checkType"
      if [[ $3 == $checkType* ]] 
      then
         goodArg=true
         break
      fi
   done

   if [ "$goodArg" = false ] ; then
       usage "Unexpected " $1 " provided [" $3 "] expected " ${argAry1[@]}
   fi
}


buildProjects() {
   goodBuild=false

   declare -a argAry1=("${!1}")
   echo "${argAry1[@]}"

   for project in ${argAry1[@]}
   do
      projDir="$baseDir/$project"
      echo " building : $projDir"

      cd $projDir

      ## for installer projects we need to run 'ant create-local-installer' instead of just 'ant'
      ant clean

      if [[ "${installerProjects[@]}" =~ "${project}" ]]; then 
         echo "INSTALLER Project so building local installer ....."
         ant create-local-installer |& tee /tmp/bld.out
      else 
         echo "NOT an installer project so just building ant ....."
         ant |& tee /tmp/bld.out
      fi
      tail /tmp/bld.out  | grep "BUILD SUCCESSFUL"
      if [[ $? -ne 0 ]] 
      then 
         echo "Failed to build : $projDir, exiting ...."
         exit 1;
      fi
   done
}

buildAll() {
   goodBuild=false

   cd $baseDir
   ./buildall |& tee /tmp/bld.out

   tail /tmp/bld.out  | grep "BUILD SUCCESSFUL"
   if [[ $? -ne 0 ]] 
   then 
      echo "Failed to build-all, exiting ...."
      exit 1;
   fi
}

copyBootstrap() {
   echo " "; echo "--------------------------------------------"; echo " "
   echo "  Copying Bootstrap ... "; echo
   lbbsLocal=$baseDir/lb/nst-bootstrap/target/jars/$lbbsUnobsJarName
   lbbsRemote=$remoteMachine:$lbInstallDir/$lbbsJarName
   echo " "; echo " "; echo " Newly built BOOTSTRAP jar : "
   ls -la $lbbsLocal
   echo " "; echo " "; echo " Copying to $remoteMachine"
   scp $lbbsLocal $lbbsRemote
   ssh $remoteMachine "ls -la ${lbInstallDir}/${lbbsJarName}"
   echo " "; echo "--------------------------------------------"; echo " "
}

copyLbJar() {
   echo " "; echo "--------------------------------------------"; echo " "
   echo "  Copying LB jar ... "; echo
   lbLocal=$baseDir/lb/nst-lb/target/jars/$lbUnobsJarName
   lbRemote=$remoteMachine:$lbInstallDir/$lbJarName
   echo " "; echo " "; echo " Newly built LB jar : "
   ls -la $lbLocal
   echo " "; echo " "; echo " Copying to $remoteMachine"
   scp $lbLocal $lbRemote
   ssh $remoteMachine "ls -la ${lbInstallDir}/${lbJarName}"
   echo " "; echo "--------------------------------------------"; echo " "
}

copyMrbJar() {
   echo " "; echo "--------------------------------------------"; echo " "
   echo "  Copying MRB jar ... "; echo
   mrbLocal=$baseDir/mrb/target/jars/$mrbUnobsJarName
   mrbRemote=$remoteMachine:$mrbInstallDir/$mrbJarName
   echo " "; echo " "; echo " Newly built MRB jar : "
   ls -la $mrbLocal
   echo " "; echo " "; echo " Copying to $remoteMachine"
   scp $mrbLocal $mrbRemote
   ssh $remoteMachine "ls -la ${mrbInstallDir}/${mrbJarName}"
   echo " "; echo "--------------------------------------------"; echo " "
}

copyVipManagerJarLB() {
   echo " "; echo "--------------------------------------------"; echo " "
   echo "  Copying VIP Manager (LB) ... "; echo
   vipmLocal=$baseDir/vip-manager/target/jars/$vipManagerUnobsJarName
   vipmRemote=$remoteMachine:$lbInstallDir/$vipManagerJarName
   echo " "; echo " "; echo " Newly built vip-manager jar : "
   ls -la $vipmLocal
   echo " "; echo " "; echo " Copying to $remoteMachine LB installation"
   scp $vipmLocal $vipmRemote
   ssh $remoteMachine "ls -la ${lbInstallDir}/${vipManagerJarName}"
   echo " "; echo "--------------------------------------------"; echo " "
}

copyVipManagerJarMRB() {
   echo " "; echo "--------------------------------------------"; echo " "
   echo "  Copying VIP Manager (MRB) ... "; echo
   vipmLocal=$baseDir/vip-manager/target/jars/$vipManagerUnobsJarName
   vipmRemote=$remoteMachine:$mrbInstallDir/$vipManagerJarName
   echo " "; echo " "; echo " Newly built vip-manager jar : "
   ls -la $vipmLocal
   echo " "; echo " "; echo " Copying to $remoteMachine MRB installation"
   scp $vipmLocal $vipmRemote
   ssh $remoteMachine "ls -la ${mrbInstallDir}/${vipManagerJarName}"
   echo " "; echo "--------------------------------------------"; echo " "
}

copyLbUi() {
   echo " "; echo "--------------------------------------------"; echo " "
   echo "  Copying LB-UI ... "; echo
   lbuiLocal=$baseDir/lb/lb-admin-web-gui/target/jars/lb-admin-web-gui-unobs.war
   lbuiRemote=$remoteMachine:$lbInstallDir/$jettyAppsDir/
   echo " "; echo " "; echo " Newly built jar : "
   ls -la $lbuiLocal
   echo " "; echo " "; echo " Copying to $remoteMachine"
   scp $lbuiLocal $lbuiRemote
   ssh $remoteMachine "ls -la ${lbInstallDir}/${jettyAppsDir}/lb*.war"
   echo " "; echo "--------------------------------------------"; echo " "
}

copyMrbUi() {
   echo " "; echo "--------------------------------------------"; echo " "
   echo "  Copying MRB-UI ... "; echo
   mrbuiLocal=$baseDir/mrb-admin-web-gui/target/jars/mrb-admin-web-gui-unobs.war
   mrbuiRemote=$remoteMachine:$mrbInstallDir/$jettyAppsDir/
   echo " "; echo " "; echo " Newly built jar : "
   ls -la $mrbuiLocal
   echo " "; echo " "; echo " Copying to $remoteMachine"
   scp $mrbuiLocal $mrbuiRemote
   ssh $remoteMachine "ls -la ${mrbInstallDir}/${jettyAppsDir}/mrb*.war"
   echo " "; echo "--------------------------------------------"; echo " "
}



##########################
#########
##

baseDir=/home/agrahame/projects/src

if [ $# -ne 2 ]
  then
     usage "Unexpected number of args"
fi

declare -a lbui=(admin-web-gui-shared lb/lb-admin-web-gui)
declare -a mrbui=(admin-web-gui-shared mrb-admin-web-gui)
declare -a lbi=(installers/installer-common installers/lb-installer)
declare -a mrbi=(installers/installer-common installers/mrb-installer)
declare -a mrb=(mrb-common mrb)
declare -a lbbs=(lb/nst-bootstrap)
declare -a lb=(lb/nst-lb)
declare -a vipm=(vip-manager)

/home/agrahame/scripts/t1.sh

checkArg "Build Type" buildTypes[@] $1
checkArg "Remote Machine" expectedVMs[@] $2

#if we get here the given args are correct, now lets give them more meaningful names
buildType=$1
remoteMachine=$2


# now do the work
case "$buildType" in
   lbi) echo "Building LB Installer ..."
        buildProjects lbi[@]
        lbiLocal="$baseDir/installers/lb-installer/target/installer/$lbInstallerJarName"
        lbiRemote="$remoteMachine:"
        echo " "; echo " "; echo " Newly built LB installer jar : "
        ls -la $lbiLocal
        echo " "; echo " "; echo " Copying to $remoteMachine"
        scp $lbiLocal $lbiRemote
        ssh $remoteMachine "ls -la /root/$lbInstallerJarName"
        ;;

   mrbi) echo "Building MRB Installer ..."
         buildProjects mrbi[@]
         mrbiLocal="$baseDir/installers/mrb-installer/target/installer/$mrbInstallerJarName"
         mrbiRemote="$remoteMachine:"
         echo " "; echo " "; echo " Newly built MRB installer jar : "
         ls -la $mrbiLocal
         echo " "; echo " "; echo " Copying to $remoteMachine"
         scp $mrbiLocal $mrbiRemote
         ssh $remoteMachine "ls -la /root/$mrbInstallerJarName"
         ;;

   lbui) echo "Building LB UI ..."
         buildProjects lbui[@]
         copyLbUi
         ssh $remoteMachine "service $jettyService stop; find ${lbInstallDir}/${jettyDir} -name "*.log*" | xargs rm -fv; service $jettyService start"
         ;;

   mrbui) echo "Building MRB UI ..."
          buildProjects mrbui[@]
          copyMrbUi
          ssh $remoteMachine "service $jettyService stop; find ${mrbInstallDir}/${jettyDir} -name "*.log*" | xargs rm -fv; service $jettyService start"
          ;;

   mrb)  echo "Building MRB jar ..."
         buildProjects mrb[@]
         copyMrbJar
         ssh $remoteMachine "service $mrbService stop; echo; echo; echo; find ${mrbInstallDir}/ -maxdepth 1 -name "*.log*" | xargs rm -fv; service $mrbService start"
         ;;

   lbbs)  echo "Building LB Bootstrap ..."
          buildProjects lbbs[@]
          copyBootstrap
          ssh $remoteMachine "service $lbService stop; find ${lbInstallDir} -maxdepth 1 -name "*.log*" | xargs rm -fv; service $lbService start"
          ;;

   lb)  echo "Building LB jar..."
        buildProjects lb[@]
        copyLbJar
        ssh $remoteMachine "service $lbService stop; echo; echo; echo; find ${lbInstallDir}/ -maxdepth 1 -name "*.log*" | xargs rm -fv; service $lbService start"
        ;;

   lvipm)  echo "Building VIP Manager (for LB) ..."
           buildProjects vipm[@]
           copyVipManagerJarLB
           ssh $remoteMachine "service $vipManagerService stop; echo; echo; echo; find ${lbInstallDir}/ -maxdepth 1 -name "nst-vip-manager*.log*" | xargs rm -fv; service $vipManagerService start"
           ;;

   mvipm)  echo "Building VIP Manager (for MRB) ..."
           buildProjects vipm[@]
           copyVipManagerJarMRB
           ssh $remoteMachine "service $vipManagerService stop; echo; echo; echo; find ${mrbInstallDir}/ -maxdepth 1 -name "nst-vip-manager*.log*" | xargs rm -fv; service $vipManagerService start"
           ;;

   lball) echo "Building all, copying new versions of unobfuscated jars, cleaning out logs and restarting all services"
          buildall
          copyBootstrap
          copyLbJar
          copyVipManagerJarLB
          copyLbUi
          ssh $remoteMachine "service $jettyService stop; service $vipManagerService stop; service $lbService stop"
          ssh $remoteMachine "find ${lbInstallDir}/ -maxdepth 1 -name "*.log*" | xargs rm -fv"
          ssh $remoteMachine "service $jettyService start; service $vipManagerService start; service $lbService start"
          ;;

   mrball) echo "Building all, copying new versions of unobfuscated jars, cleaning out logs and restarting all services"
           buildall
           copyMrbJar
           copyVipManagerJarMRB
           copyMrbUi
           ssh $remoteMachine "service $jettyService stop; service $vipManagerService stop; service $mrbService stop"
           ssh $remoteMachine "find ${mrbInstallDir}/ -maxdepth 1 -name "*.log*" | xargs rm -fv"
           ssh $remoteMachine "service $jettyService start; service $vipManagerService start; service $mrbService start"
           ;;

   *) echo "Unexpected build type : $buildType"
      ;;
esac

/home/agrahame/scripts/t2.sh

echo " "; echo " "
