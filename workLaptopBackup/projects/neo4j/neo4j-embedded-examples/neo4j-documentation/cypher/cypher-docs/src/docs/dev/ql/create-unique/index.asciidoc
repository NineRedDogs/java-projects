[role=deprecated]
[[query-create-unique]]
= CREATE UNIQUE

[abstract]
The `CREATE UNIQUE` clause is a mix of `MATCH` and `CREATE` -- it will match what it can, and create what is missing.

[IMPORTANT]
The `CREATE UNIQUE` clause was removed in Cypher 3.2.
Using the `CREATE UNIQUE` clause will cause the query to fall back to using Cypher 3.1.
Use `<<query-merge, MERGE>>` instead of `CREATE UNIQUE`; refer to the <<query-create-unique-introduction, Introduction>> for an example of how to achieve the same level of node and relationship uniqueness.


* <<query-create-unique-introduction, Introduction>>
* <<query-create-unique-nodes, Create unique nodes>>
 ** <<create-unique-create-node-if-missing, Create node if missing>>
 ** <<create-unique-create-nodes-with-values, Create nodes with values>>
 ** <<create-unique-create-labeled-node-if-missing, Create labeled node if missing>>
* <<query-create-unique-relationships, Create unique relationships>>
 ** <<create-unique-create-relationship-if-it-is-missing, Create relationship if it is missing>>
 ** <<create-unique-create-relationship-with-values, Create relationship with values>>
* <<create-unique-describe-complex-pattern, Describe complex pattern>>


[[query-create-unique-introduction]]
== Introduction

`CREATE UNIQUE` is in the middle of `MATCH` and `CREATE` -- it will match what it can, and create what is missing.

We show in the following example how to express using `MERGE` the same level of uniqueness guaranteed by `CREATE UNIQUE` for nodes and relationships.

Assume the original set of queries is given by:

[source, cypher]
----
MERGE (p:Person {name: 'Joe'})
RETURN p

MATCH (a:Person {name: 'Joe'})
CREATE UNIQUE (a)-[r:LIKES]->(b:Person {name: 'Jill'})-[r1:EATS]->(f:Food {name: 'Margarita Pizza'})
RETURN a

MATCH (a:Person {name: 'Joe'})
CREATE UNIQUE (a)-[r:LIKES]->(b:Person {name: 'Jill'})-[r1:EATS]->(f:Food {name: 'Banana'})
RETURN a
----

This will create two `:Person` nodes, a `:LIKES` relationship between them, and two `:EATS` relationships from one of the `:Person` nodes to two `:Food` nodes.
No node or relationship is duplicated.

The following set of queries -- using `MERGE` -- will achieve the same result:

[source, cypher]
----
MERGE (p:Person {name: 'Joe'})
RETURN p

MATCH (a:Person {name: 'Joe'})
MERGE (b:Person {name: 'Jill'})
MERGE (a)-[r:LIKES]->(b)
MERGE (b)-[r1:EATS]->(f:Food {name: 'Margarita Pizza'})
RETURN a

MATCH (a:Person {name: 'Joe'})
MERGE (b:Person {name: 'Jill'})
MERGE (a)-[r:LIKES]->(b)
MERGE (b)-[r1:EATS]->(f:Food {name: 'Banana'})
RETURN a

----

We note that all these queries can also be combined into a single, larger query.

The `CREATE UNIQUE` examples below use the following graph:

include::includes/cypher-createunique-graph.asciidoc[]


[[query-create-unique-nodes]]
== Create unique nodes

include::create-node-if-missing.asciidoc[leveloffset=+1]

include::create-nodes-with-values.asciidoc[leveloffset=+1]

include::create-labeled-node-if-missing.asciidoc[leveloffset=+1]


[[query-create-unique-relationships]]
== Create unique relationships

include::create-relationship-if-it-is-missing.asciidoc[leveloffset=+1]

include::create-relationship-with-values.asciidoc[leveloffset=+1]

include::describe-complex-pattern.asciidoc[]

